'''вся логика приложения описывается здесь. 
Каждый обработчик получает HTTP-запрос, обрабатывает его и возвращает ответ

И спользование обработчиков - классов
Использование класса – это альтернативный способ реализации обработчи-
ков. Так как обработчик – это вызываемая функция, которая принимает запрос
и возвращает ответ, мы можем реализовать его в виде метода класса. Django
предоставляет для этого базовый класс обработчиков. Все они должны быть
унаследованы от класса View, который управляет вызовом нужного метода в за-
висимости от HTTP-запроса и некоторыми другими функциями.
Обработчики-классы в некоторых случаях могут быть более полезными, чем
функции-обработчики. Их преимущества заключаются в следующем:
  группируют код в несколько функций в зависимости от HTTP-методов
запроса, таких как GET,POST, PUT;
  позволяют задействовать множественное наследование для создания
многократно используемых обработчиков (их часто называют примеся-
ми, или миксинами).
'''
from django.shortcuts import render, get_object_or_404
from .models import Post
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.views.generic import ListView

class PostListView(ListView):
    '''Заменили функцию post_list на класс-наследник ListView Django. 
    Этот базовый класс обработчика списков позволяет отображать несколько объектов любого типа.'''
    queryset = Post.published.all() # используем переопределенный QuerySet модели вместо
                                    # получения всех объектов.
                                    # Вместо задания атрибута QuerySet мы могли бы указать
                                    # модель model=Post, и тогда Django, используя 
                                    # стандартный менеджер модели, получал бы объекты как 
                                    # Post.objects.all()
    context_object_name = 'posts'   # используем posts в качестве переменной контекста 
                                    # HTML-шаблона, в которой будет храниться список объектов. 
                                    # Если не указать атрибут context_object_name, то
                                    # по умолчанию будет использоваться переменная object_list,
                                    # т.е. ей нужно будет передавать данные для отображения
                                    # на HTML-странице
    paginate_by = 3 # используем постраничное отображение по три объекта на странице
    template_name = 'blog/post/list.html' # используем указанный шаблон для формирования 
                                          # страницы; если не указать template_name, 
                                          # то базовый класс ListView искал бы
                                          # шаблон blog/post_list.html

def post_detail(request, year, month, day, post): 
    '''принимает аргументы для получения статьи по указанным слагу и дате,
    чтобы гарантированно получить статью по комбинации этих полей,
    поскольку слаг должен быть уникальным для статей, созданных в один день'''
    post = get_object_or_404(Post, # используем get_object_or_404() для поиска нужной статьи;
                                   # возвращает объект, который подходит по указанным параметрам,
                                   # или вызывает исключение HTTP 404 (объект не найден), если не найдет ни одной статьи
                             slug=post,
                             status='published',
                             publish__year=year,
                             publish__month=month,
                             publish__day=day)
    return render(request, 'blog/post/detail.html', {'post': post})
